联表查询
select e.emp_id,e.emp_name,e.gender,e.email,e.d_id,d.dept_id,d.dept_name
from tbl_emp e left join tbl_dept d on e.d_id=d.dept_id


ssm
crud:
create(创建)
Retrieve(查询)
Update(更新)
Delete(删除)

功能点
1、分页
2、数据校验
   jquery前端校验+（SpringMVC自带）JSR303后端校验
3、ajax
4、Rest风格的URI：使用HTTP协议请求方式的动词，来表示对资源的操作
(GET(查询),POST(新增),PUT(修改),DELETE(删除))

技术点
基础框架-ssm(SpringMVC+Spring+MyBatis)
数据库MySQL
前端框架-bootstrap快速搭建简洁美观的界面
项目的依赖管理-Maven
分页-pagehelper(插件)
逆向工程-MyBatis Generator

基础环境搭建
1、创建一个maven工程
2、引入项目依赖的jar包
spring、springmvc、mybatis、数据库连接池，驱动包、其他
3、引入bootstrap前端框架
4、编写ssm整合的关键配置文件
  web.xml spring,springmvc,mybatis使用mybatis的逆向工程生成对应的bean以及mapper
  (1、引入jar包    2、mbg.xml   3、MBGTest.java)
5、测试mapper


SSM整合总体思路

mapper调用数据库由于框架(mybatis)的支持
数据源(DataSource)跟数据库建立连接，然后将数据源装配给SqlSessionFactoryBean
然后SqlSessionFactoryBean通过SqlSession给mapper提供支持
(Spring和mybatis整合以后，就不操作SqlSession了，直接用的就是mapper，但是底层还是存在的)

service上加上声明式事务，声明式事务需要一个事务管理器(TransactionManager)装配我们的数据源
配置事务通知(tx:advice)和事务的切入点表达式(aop:pointcut)，事务管理器需要装配到我们的事务通知里面
aop:advisor将事务通知与事务的切入点表达式关联起来

web.xml中配置这两个
1、ContextLoaderListener监听器读取spring-tx.xml和spring-mybatis.xml配置文件创建IOC容器(持久化层)
2、DispatcherServlet读取spring-mvc.xml

handler(controller)---(调用)-->service---(调用)-->mapper(dao)---(调用)--->数据库


CRUD查询
1、访问index.jsp
2、index.jsp页面发送出查询员工列表请求
3、EmployeeController来接收请求，查出员工数据
4、来到list.jsp页面进行展示

URI:/emps


浏览器、安卓客户端、IOS客户端


查询-ajax
1、index.jsp页面直接发送ajax请求进行员工数据的查询
2、服务器将查出的数据，以json字符串的形式返回给浏览器
3、浏览器收到js字符串。可以使用js对json进行解析，使用js通过dom增删改改变页面。
4、返回json。实现客户端的无关性。

新增--逻辑
1、在index.jsp页面点击“新增”
2、弹出新增对话框
3、去数据库查询部门列表，显示在对话框中
4、用户输入数据，并进行校验
   jquery前端校验，ajax用户名重复校验，重要数据 (后端校验(JSR303)，唯一约束)；
5、完成保存

URI:
/emp/{id}  GET 查询员工
/emp       POST 保存员工
/emp/{id}  PUT 修改员工
/emp/{id}  DELETE 删除员工

修改--逻辑
1、点击编辑
2、弹出用户修改的模态框(显示用户信息)
3、点击更新，完成用户修改
